$date
	Fri Nov 18 19:28:36 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var reg 1 ! clk $end
$scope module cpu_top $end
$var wire 1 ! clk $end
$var wire 32 " instr_data [31:0] $end
$var wire 32 # instr_addr [31:0] $end
$scope module core $end
$var wire 32 $ alu_b_src [31:0] $end
$var wire 1 ! clk $end
$var wire 32 % instr [31:0] $end
$var wire 32 & instr_addr [31:0] $end
$var wire 32 ' last_pc [31:0] $end
$var wire 5 ( rf_raddr0 [4:0] $end
$var wire 5 ) rf_waddr [4:0] $end
$var wire 32 * rf_wdata [31:0] $end
$var wire 5 + rs1 [4:0] $end
$var wire 1 , rf_we $end
$var wire 32 - rf_rdata0 [31:0] $end
$var wire 5 . rd [4:0] $end
$var wire 32 / pc_next [31:0] $end
$var wire 32 0 instr_data [31:0] $end
$var wire 32 1 imm32 [31:0] $end
$var wire 12 2 imm12 [11:0] $end
$var wire 32 3 alu_result [31:0] $end
$var wire 1 4 alu_op $end
$var reg 32 5 pc [31:0] $end
$scope module alu $end
$var wire 32 6 src_b [31:0] $end
$var wire 32 7 src_a [31:0] $end
$var wire 1 4 op $end
$var reg 32 8 res [31:0] $end
$upscope $end
$scope module control $end
$var wire 32 9 instr [31:0] $end
$var wire 7 : opcode [6:0] $end
$var wire 3 ; funct3 [2:0] $end
$var reg 1 4 alu_op $end
$var reg 12 < imm12 [11:0] $end
$var reg 1 , rf_we $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 = raddr0 [4:0] $end
$var wire 5 > raddr1 [4:0] $end
$var wire 5 ? waddr [4:0] $end
$var wire 32 @ wdata [31:0] $end
$var wire 1 , we $end
$var wire 32 A rdata1 [31:0] $end
$var wire 32 B rdata0 [31:0] $end
$scope begin reg_init[0] $end
$upscope $end
$scope begin reg_init[1] $end
$upscope $end
$scope begin reg_init[2] $end
$upscope $end
$scope begin reg_init[3] $end
$upscope $end
$scope begin reg_init[4] $end
$upscope $end
$scope begin reg_init[5] $end
$upscope $end
$scope begin reg_init[6] $end
$upscope $end
$scope begin reg_init[7] $end
$upscope $end
$scope begin reg_init[8] $end
$upscope $end
$scope begin reg_init[9] $end
$upscope $end
$scope begin reg_init[10] $end
$upscope $end
$scope begin reg_init[11] $end
$upscope $end
$scope begin reg_init[12] $end
$upscope $end
$scope begin reg_init[13] $end
$upscope $end
$scope begin reg_init[14] $end
$upscope $end
$scope begin reg_init[15] $end
$upscope $end
$scope begin reg_init[16] $end
$upscope $end
$scope begin reg_init[17] $end
$upscope $end
$scope begin reg_init[18] $end
$upscope $end
$scope begin reg_init[19] $end
$upscope $end
$scope begin reg_init[20] $end
$upscope $end
$scope begin reg_init[21] $end
$upscope $end
$scope begin reg_init[22] $end
$upscope $end
$scope begin reg_init[23] $end
$upscope $end
$scope begin reg_init[24] $end
$upscope $end
$scope begin reg_init[25] $end
$upscope $end
$scope begin reg_init[26] $end
$upscope $end
$scope begin reg_init[27] $end
$upscope $end
$scope begin reg_init[28] $end
$upscope $end
$scope begin reg_init[29] $end
$upscope $end
$scope begin reg_init[30] $end
$upscope $end
$scope begin reg_init[31] $end
$upscope $end
$upscope $end
$upscope $end
$scope module rom $end
$var wire 32 C addr [31:0] $end
$var wire 1 ! clk $end
$var reg 32 D q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
b0 C
bx B
b0 A
bx @
bx ?
b0 >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
b11111111111111111111111111111111 5
x4
bx 3
bx 2
bx 1
bx 0
b0 /
bx .
bx -
x,
bx +
bx *
bx )
bx (
b100 '
b0 &
bx %
bx $
b0 #
bx "
0!
$end
#1
b1011 *
b1011 @
b1011 3
b1011 8
b0 -
b0 7
b0 B
b101 )
b101 ?
b101 .
b0 (
b0 =
b0 +
b1011 $
b1011 6
b1011 1
b1011 2
b1011 <
14
1,
b10011 :
b0 ;
b1 #
b1 &
b1 C
b1 /
b101100000000001010010011 %
b101100000000001010010011 9
b101100000000001010010011 "
b101100000000001010010011 0
b101100000000001010010011 D
b0 5
1!
#2
0!
#3
b1011 -
b1011 7
b1011 B
b10100 *
b10100 @
b10100 3
b10100 8
b10 #
b10 &
b10 C
b10 /
b111 )
b111 ?
b111 .
b101 (
b101 =
b101 +
b1001 $
b1001 6
b1001 1
b1001 2
b1001 <
14
1,
b1 5
b100100101000001110010011 %
b100100101000001110010011 9
b100100101000001110010011 "
b100100101000001110010011 0
b100100101000001110010011 D
1!
#4
0!
#5
b0 -
b0 7
b0 B
b0 *
b0 @
b0 3
b0 8
b0 )
b0 ?
b0 .
b0 (
b0 =
b0 +
b0 $
b0 6
b0 1
b0 2
b0 <
14
1,
b11 #
b11 &
b11 C
b11 /
b10011 %
b10011 9
b10011 "
b10011 0
b10011 D
b10 5
1!
#6
0!
#7
b10100 *
b10100 @
b10100 3
b10100 8
b10100 -
b10100 7
b10100 B
b100 #
b100 &
b100 C
b100 /
b1011 )
b1011 ?
b1011 .
b111 (
b111 =
b111 +
14
1,
b11 5
b111000010110010011 %
b111000010110010011 9
b111000010110010011 "
b111000010110010011 0
b111000010110010011 D
1!
#8
0!
#9
b1111 *
b1111 @
b1111 3
b1111 8
b111 )
b111 ?
b111 .
b11111111111111111111111111111011 $
b11111111111111111111111111111011 6
b11111111111111111111111111111011 1
b111111111011 2
b111111111011 <
14
1,
b11111111101100111000001110010011 %
b11111111101100111000001110010011 9
b11111111101100111000001110010011 "
b11111111101100111000001110010011 0
b11111111101100111000001110010011 D
b100 5
1!
#10
0!
